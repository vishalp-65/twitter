generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String  @id @default(cuid())
  firstName       String
  lastName        String?
  email           String  @unique
  profileImageURL String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followers Follows[] @relation("follower")
  following Follows[] @relation("following")

  tweets   Tweet[]
  comments Comment[]
  likes    Like[]
}

model Follows {
  follower   User   @relation("follower", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Tweet {
  id       String  @id @default(cuid())
  content  String
  imageURL String?

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  comments Comment[]
  likes    Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String    @id @default(cuid())
  content  String
  tweet    Tweet?    @relation(fields: [tweetId], references: [id])
  tweetId  String?
  parent   Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  parentId String?
  replies  Comment[] @relation("CommentToComment")
  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  likes    Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  tweet     Tweet?   @relation(fields: [tweetId], references: [id])
  tweetId   String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  createdAt DateTime @default(now())
}
